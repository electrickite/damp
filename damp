#!/bin/bash

################################################################################
# DAMP bash script
# Manage local DAMP (Drupal, Apache, MySQL, PHP) environment and sites.
#
# Tested on the following distributions:
# - Linux Mint 14 Nadia (Cinnamon 32/64bit)
# - Linux Mint 14 Nadia (MATE 32/64bit)
#
# Usage:
# 1) Make script file executable. (chmod a+x damp)
# 2) For detailed usage information, execute ./damp --help
#
# LICENSE: This file is open source software (OSS) licensed under the GPLv2 and
#          may be copied under certain conditions. See the links below for
#          details.
#
# Author:          Corey Hinshaw <coreyhinshaw@gmail.com>
# Homepage:        https://github.com/electrickite/damp
# License:         GPLv2 (http://www.gnu.org/licenses/gpl2.html)
# Version:         0.2.0
################################################################################


########################################
##          Global variables          ##
########################################

# Uncomment to override default configuration directory
#conf_dir="$HOME/.local/share/damp"

progname="damp"
prog_version="0.2.0"
global_opts="phpconf httpdconf httpdconfdir httpdvhost httpdport dbconf rootdbuser dbport initpath lang dbadminconf"
global_pass_opts="rootdbpass"
site_opts="name domain docroot database dbuser"
site_pass_opts="dbpass"
commands="command echo if while for break case exit su who awk cat grep cp mv ls chmod sed eval xdg-open read tr head rm find xargs id mkdir getopt set shift getent cut"


########################################
##        Function definitions        ##
########################################

# Define basic help text
usage () {
  cat <<EOF
Usage: damp COMMAND [OPTION]... [SITE]
Manage local DAMP (Drupal, Apache, MySQL, PHP) environment and sites.

Commands:
  list, ls                 show a list of installed sites
  info                     view details about a particular site
  new                      create a new site
  open                     open a site in a web browser
  remove, rm, delete       delete a site
  set                      set site/global options
  get                      show site/global cofiguration files
  start                    start services  
  stop                     stop services  
  restart                  restart services  
  status                   show status of services  
  setup                    install and configure DAMP stack  
  configure, conf          edit configuration files  
  fixperms, fix            fix site directory permissions  

Options:
  -a, --dbadmin            install or open web-based database administration
                           front end
  -b, --database, --db     database name, defaults to site name
  -d, --domain             domain name (ie. example.com)
  -n, --name               site shortname (must be unique)
  -p, --docroot, --path    full path to the Drupal installation
  -M, --make               path to dush make file, will be built at docroot

  --dbuser                 database user name, either site user or root account
  --dbpass                 the database user password
              
  --dbconf                 mysql configuration file path
  --dbport                 mysql port number
  --httpdconf              apache configuration file path
  --httpdport              apache port number
  --httpdvhost             apache vhost configuration file directory
  --initpath               path to service init scripts
  --phpconf                php configuration file path

  -h, --help               display this help and exit
  -i, --install            install script to path or open site install page
                           used with setup or open
  --language               language to use during site installs
  -m, --mail               install system MTA, only used during setup
  --passwords              force display passwords in option lists
  -u, --drush              install drush (the DRUpal SHell)
  --uninstall              uninstall script, configuration, and sites
                           used wuth setup
  -v, --version            output version information and exit
  -y, --yes                answer yes to all prompts

With no SITE is specified, operatons have global scope if applicable. Note that
certain commands must be run as root.

This script is designed for use in local Drupal development. It is not intended
for production applications. Security and permissions are deliberately relaxed.
It is highly recommended that a host-based firewall be enabled while DAMP is in
use.

Examples:
  damp list
  damp open mysite
  damp set --domain example.com mysite
  damp new --name mysite -d example.com
  damp rm -y mysite
  damp configure php

Report bugs at <https://github.com/electrickite/damp/issues>
DAMP homepage: <https://github.com/electrickite/damp>

EOF
}

# Error handling
error_exit () {
  echo "${progname}: ${1:-"unknown error"}" 1>&2
  exit 1
}

# Make sure we are running as root
requires_root () {
  if [ $(id -u) -ne 0 ]
  then
    error_exit "'$operation' must be run as root"
  fi
}

# Show the script version and stack components
show_version () {
  detect_os
  case "$os" in
    Ubuntu|Debian)
      apache_ver="apache2"
      ;;
    *|"Red Hat"|CentOS)
      apache_ver="httpd"
      ;;
  esac
  command -v $apache_ver > /dev/null 2>&1
  if [ $? -ne 0 ]; then
    echo "apache not found"
  else
    eval "$apache_ver -v"
  fi
  echo ""
  for i in mysql php; do
    command -v $i > /dev/null 2>&1
    if [ $? -ne 0 ]; then
      echo "$i not found"
    else
      eval "$i --version"
    fi
    echo ""
  done
  echo "DAMP script version $prog_version"
  echo "DAMP is under heavy development - expect frequent changes"
}

# Verify we have access to all necessary shell commands
check_commands () {
  for i in $commands; do
    command -v $i > /dev/null 2>&1
    if [ $? -ne 0 ]; then
      error_exit "required command $i not found"
    fi
  done
}

# Executes command as the logged in user or the user specified in the second
# argument
as_user () {
  if [ -z $2 ]
  then
    acting_user=$(who am i | awk '{print $1}')
  else
    acting_user=$2
  fi
  if [ $acting_user == $(whoami) ]
  then
    eval "$1"
  else
    su -c "$1" $acting_user
  fi
}

# Set up configuration directories
create_conf_dir () {
  if [ ! -d "$conf_dir" ]; then
    as_user "mkdir -p \"$conf_dir\"" $conf_user
    chmod 755 "$conf_dir"
  fi
  if [ ! -d "$conf_dir/sites" ]; then
    as_user "mkdir -p \"$conf_dir/sites\"" $conf_user
    chmod 750 "$conf_dir/sites"
  fi
  if [ $? -ne 0 ]; then
    error_exit "could not create configuration directories"
  fi
}

# Generate the default global options file for various operating systems
generate_global_conf () {
  case "$os" in
    "Red Hat"|CentOS)
      as_user "cat > \"$conf_dir/damp.conf\" <<EOF
phpconf=/etc/php.ini
httpdconf=/etc/httpd/conf/httpd.conf
httpdconfdir=/etc/httpd/conf.d
httpdvhost=/etc/httpd/conf.d
httpdport=80
dbconf=/etc/my.cnf
rootdbuser=root
dbport=3306
initpath=/etc/init.d
lang=en
dbadminconf=/etc/phpmyadmin/config.inc.php
EOF" $conf_user
      ;;
    *|Ubuntu|Debian)
      as_user "cat > \"$conf_dir/damp.conf\" <<EOF
phpconf=/etc/php5/apache2/php.inisudp 
httpdconf=/etc/apache2/apache2.conf
httpdconfdir=/etc/apache2/conf.d
httpdvhost=/etc/apache2/sites-enabled
httpdport=80
dbconf=/etc/mysql/my.cnf
rootdbuser=root
dbport=3306
initpath=/etc/init.d
lang=en
dbadminconf=/etc/phpmyadmin/config.inc.php
EOF" $conf_user
      ;;
  esac
  echo "rootdbpass=" > "$conf_dir/damp.pass"
  chmod 644 "$conf_dir/damp.conf"
  chmod 640 "$conf_dir/damp.pass"
}

# Parse configuration file options and load into global variables
parse_conf () {
  while read propline ; do 
    # ignore comment lines
    echo "$propline" | grep "^#" >/dev/null 2>&1 && continue
    # if not empty, set the property using declare
    [ ! -z "$propline" ] && eval $propline
  done < "$1"
  if [ $? -ne 0 ]; then
    error_exit "could not parse configuration file"
  fi
}

# Detect operating system - This can probably be improved
detect_os () {
  distributions="Red CentOS Ubuntu Debian"
  os=""
  for i in $distributions; do
    cat /etc/*release | grep $i > /dev/null 2>&1
    if [ $? == 0 ]; then
      os=$i
    fi
  done
  if [ -z $os ]; then
    error_exit "unsupported operating system - perform operation manually"
  fi
  if [ $os == "Red" ]; then
    os="Red Hat"
  fi
}

# Checks if a site has been specified
requires_site () {
  if [ -z $site ]
  then
    error_exit "the requested operation requires a site"
  fi
}

# checks whether a site (really the config file) exists
site_exists () {
  [ -d "$conf_dir/sites/${1}" ]
}

# Builds the FQDN for a site from the name and domain
build_fqdn () {
  if [ ! -z $domain ]
    then
      fqdn="${name}.${domain}"
    else
      fqdn="$name"
  fi
}

# Load site options into global variables
load_site () {
  site_exists "$1"
  if [ $? == 0 ]
  then
    parse_conf "$conf_dir/sites/${1}/conf"
    if [ -r "$conf_dir/sites/${1}/pass" ]; then
      parse_conf "$conf_dir/sites/${1}/pass"
    fi
    build_fqdn
  else
    error_exit "site does not exist"
  fi
}

# Print formatted site information
display_site () {
  echo "Site information:"
  echo "  Name:          $name"
  echo "  Domain:        $fqdn"
  echo "  Document root: $docroot"
  echo "  Database:      $database"
  echo "  DAMP config:   $conf_dir/sites/${name}"
  echo "  Apache config: $httpdvhost/${name}.conf"
  echo ""
  echo "  Link:          http://${fqdn}:${httpdport}"
}

# Generate a settings.php file for a Drupal site with correct database settings
create_drupal_settings () {
  as_user "cp -f \"$docroot/sites/default/default.settings.php\" \"$docroot/sites/$fqdn/settings.php\""
  if [ $? -ne 0 ]; then
    error_exit "could not write drupal site settings file."
  fi
  grep "db_url" "$docroot/sites/$fqdn/settings.php" > /dev/null 2>&1
  if [ $? -ne 0 ]
  then
    echo "
\$databases['default']['default'] = array(
  'driver' => 'mysql',
  'database' => '$database',
  'username' => '$dbuser',
  'password' => '$dbpass',
  'host' => 'localhost',
  'collation' => 'utf8_general_ci',
);" >> "$docroot/sites/$fqdn/settings.php"
  else
    echo "
\$db_url = 'mysql://${dbuser}:${dbpass}@localhost/${database}';" >> "$docroot/sites/$fqdn/settings.php"
  fi
  chmod 644 "$docroot/sites/$fqdn/settings.php"
}

# Make sure there is no vhost file with the given name.
check_vhost () {
  if [ -f "$httpdvhost/${fqdn}.conf" ]; then
    error_exit "there is already and apache vhost with that fqdn"
  fi
}

# Generate Apache vhost configuration file for a Drupal site
create_vhost () {
  cat > "$httpdvhost/${fqdn}.conf" <<EOF
<VirtualHost *:${httpdport}>
  ServerAdmin ${USER}@localhost
  DocumentRoot ${docroot}
  ServerName ${fqdn}
  RewriteEngine On
  RewriteOptions inherit
</VirtualHost>

<Directory ${docroot}>
  Options +FollowSymLinks Indexes
  AllowOverride All
  order allow,deny
  allow from all
</Directory>
EOF
  if [ $? -ne 0 ]; then
    error_exit "could not create apache vhost file"
  fi
}

# Add or remove records from the /etc/hosts file
hosts_entry () {
  case "$1" in
    add)
      echo "127.0.0.1 $2" >> /etc/hosts
      ;;
    delete)
      hosts_line="/127.0.0.1 ${2}/d"
      sed -i "$hosts_line" /etc/hosts
      ;;
  esac
  if [ $? -ne 0 ]; then
    error_exit "could not alter hosts file"
  fi
}

# Perform MySQL database operations
manage_database () {
  db_error=0
  case "$1" in
    create)
      mysql -u $rootdbuser --password=$rootdbpass --execute="CREATE DATABASE ${database};"; [ $? -ne 0 ] && db_error=1
      mysql -u $rootdbuser --password=$rootdbpass --execute="GRANT ALL PRIVILEGES ON ${database}.* TO ${dbuser}@localhost IDENTIFIED BY '${dbpass}';"; [ $? -ne 0 ] && db_error=1
      ;;
    delete)
      mysql -u $rootdbuser --password=$rootdbpass --execute="DROP USER ${dbuser}@localhost;"; [ $? -ne 0 ] && db_error=1
      mysql -u $rootdbuser --password=$rootdbpass --execute="DROP DATABASE ${database};"; [ $? -ne 0 ] && db_error=1
      ;;
    userdel)
      mysql -u $rootdbuser --password=$rootdbpass --execute="DROP USER ${2}@localhost;"; [ $? -ne 0 ] && db_error=1
      ;;
    useradd)
      mysql -u $rootdbuser --password=$rootdbpass --execute="GRANT ALL PRIVILEGES ON ${database}.* TO ${2}@localhost IDENTIFIED BY '${3}';"; [ $? -ne 0 ] && db_error=1
      ;;
  esac
  mysql -u $rootdbuser --password=$rootdbpass --execute="flush privileges;"; [ $? -ne 0 ] && db_error=1
  if [ $db_error -ne 0 ]; then
    error_exit "error performing database operation"
  fi
}

# Make sure the given docroot is a valid Drupal codebase by checking the
# default.settings.php file
check_docroot () {
  if [ ! -f "${docroot}/sites/default/default.settings.php" ]; then
    error_exit "could not verify Drupal document root"
  fi
}

# Make sure the site name is not already in use in this codebase
check_site_name () {
  if [ -d "${docroot}/sites/${fqdn}" ]; then
    error_exit "drupal site already exists with that fqdn"
  fi
}

# Change site options and alter files/configurations to match
alter_site () {
  # MySQL databases cannot be reliably renamed
  if [ ! -z $database ]; then
    error_exit "the database cannot be changed once a site has been created"
  fi

  # Copy user input to new variables
  for i in $site_opts; do
    if [ ! -z ${!i} ]; then
      eval new_${i}="${!i}"
    fi
  done
  for i in $site_pass_opts; do
    if [ ! -z ${!i} ]; then
      eval new_${i}="${!i}"
    fi
  done

  # Load existing site options
  load_site $site

  # Copy existing options to set of 'old' variables
  for i in $site_opts; do
    eval "old_${i}"="${!i}"
  done
  for i in $site_pass_opts; do
    eval "old_${i}"="${!i}"
  done
  old_fqdn=$fqdn

  # Replace current site variables with user input
  for i in $site_opts; do
    new_var_name="new_${i}"
    if [ ! -z ${!new_var_name} ]; then
      eval ${i}="${!new_var_name}"
    fi
  done
  for i in $site_pass_opts; do
    new_var_name="new_${i}"
    if [ ! -z ${!new_var_name} ]; then
      eval ${i}="${!new_var_name}"
    fi
  done
  build_fqdn

  # Alter site options - move files as necessary
  check_docroot
  if [ $name != $old_name ]; then
    site_exists $name
    if [ $? -eq 0 ]; then
      error_exit "site with that name already exists"
    fi
    check_vhost
    check_site_name
    mv "${conf_dir}/sites/${old_name}" "${conf_dir}/sites/${name}"; [ $? -ne 0 ] && alter_error=1
  fi
  if [ $fqdn != $old_fqdn ]; then
    check_vhost
    check_site_name
    hosts_entry delete "$old_fqdn"
    hosts_entry add "$fqdn"
    mv "${old_docroot}/sites/${old_fqdn}" "${old_docroot}/sites/${fqdn}"; [ $? -ne 0 ] && alter_error=1
    mv "${httpdvhost}/${old_fqdn}.conf" "${httpdvhost}/${fqdn}.conf"; [ $? -ne 0 ] && alter_error=1
  fi
  if [ $docroot != $old_docroot ]; then
    check_site_name
    mv "${old_docroot}/sites/${fqdn}" "${docroot}/sites/${fqdn}"; [ $? -ne 0 ] && alter_error=1
  fi
  if [ $dbuser != $old_dbuser ] || [ $dbpass != $old_dbpass ]; then
    manage_database userdel "$old_dbuser"
    manage_database useradd "$dbuser" "$dbpass"
  fi
  create_vhost
  create_drupal_settings
  damp_services restart
}

# Manage Apache and MySQL services
damp_services () {
  detect_os
  service_error=0
  case "$os" in
    "Red Hat"|CentOS)
      service mysqld $1; [ $? -ne 0 ] && service_error=1
      service httpd $1; [ $? -ne 0 ] && service_error=1
      ;;
    Ubuntu)
      service mysql $1; [ $? -ne 0 ] && service_error=1
      service apache2 $1; [ $? -ne 0 ] && service_error=1
      ;;
    Debian)
      $initpath/mysql $1; [ $? -ne 0 ] && service_error=1
      $initpath/apache2 $1; [ $? -ne 0 ] && service_error=1
      ;;
  esac
  if [ $service_error -ne 0 ]; then
    error_exit "errors occurred while performing the requested operations"
  fi
}

# Print a list of site names, one per line
list_sites () {
  ls -1 "$conf_dir/sites"
}

# Update Apache port settings for all sites
update_port () {
  if [ ! -z $(list_sites) ]
  then
    while read line
    do
      load_site $line
      create_vhost
    done <<< "$(list_sites)"
    damp_services restart
  fi
}

# Print a site list if no site is specified, or detailed site information
site_info () {
  if [ -z $site ]
  then
    # List all sites
    site_count=$(ls -1 "$conf_dir/sites" | wc -l)
    echo "Sites installed: $site_count"
    list_sites
  else
    # Display information about a site
    load_site $site
    display_site
  fi
}

# Opens an arbitrary URL in a web browser
open_url () {
  as_user "xdg-open "$1" > /dev/null 2>&1"
  if [ $? -ne 0 ]; then
    error_exit "could not open browser. URL is $1"
  fi
}

# Open a site in a web browser
open_site () {
  load_site $1
  option_path=""
  if [ ! -z $install ]; then
    option_path="/install.php"
  fi
  open_url "http://${fqdn}:${httpdport}${option_path}${2}"
}

# Create a new site
new_site () {
  if [ -z $dbpass ]; then
    dbpass=$(< /dev/urandom tr -dc A-Za-z0-9 | head -c8)
  fi
  for i in $site_opts; do
    if [ -z ${!i} ]
    then
      echo -n "Enter site ${i}: "
      read -e $i
      if [ -z ${!i} ] && [ $i != "domain" ]; then
        error_exit "$i is a required option"
      fi
    fi
    if [ $i == "name" ] && [ -z $dbuser ]; then
      dbuser="$name"
    fi
    if [ $i == "name" ] && [ -z $database ]; then
      database="$name"
    fi
  done
  site_exists $name
  if [ $? -ne 0 ]
  then
    build_fqdn
    if [ ! -z "$drush_make" ]; then
      command -v drush
      if [ $? -eq 0 ]; then
        as_user "drush make \"$drush_make\" \"$docroot\""
      else
        echo "$progname: drush does not seem to be installed"
      fi
    fi
    check_docroot
    check_site_name
    check_vhost
    manage_database create
    create_vhost
    as_user "mkdir -p \"$docroot/sites/$fqdn\""
    create_drupal_settings
    chmod a+w "$docroot/sites/$fqdn"
    as_user "mkdir \"$conf_dir/sites/${name}\"" $conf_user
    as_user "touch \"$conf_dir/sites/${name}/conf\"" $conf_user
    as_user "touch \"$conf_dir/sites/${name}/pass\"" $conf_user
    chmod 755 "$conf_dir/sites/${name}"
    chmod 644 "$conf_dir/sites/${name}/conf"
    chmod 640 "$conf_dir/sites/${name}/pass"
    for i in $site_opts; do
      echo "${i}=${!i}" >> "$conf_dir/sites/${name}/conf"
      if [ $? -ne 0 ]; then
        error_exit "error writing to site configuration file"
      fi
    done
    for i in $site_pass_opts; do
      echo "${i}=${!i}" >> "$conf_dir/sites/${name}/pass"
      if [ $? -ne 0 ]; then
        error_exit "error writing to site password file"
      fi
    done
    hosts_entry add "$fqdn"
    damp_services restart
    open_site $name "/install.php"
  else
    error_exit "site with that name already exists"
  fi
}

# Remove an existing site and all associated files/configurations
remove_site () {
  load_site $site
  if [ -z $yes_to_all ]; then
    echo -n "Are you sure you want to remove site '${name}' [y|n]: "
    read sure
  else
    sure="y"
  fi
  if [ "${sure}" == "y" ] || [ "${sure}" == "Y" ]
  then
    rm -Rf "$conf_dir/sites/${site}"
    rm -Rf "$docroot/sites/$fqdn"
    rm -f "$httpdvhost/${fqdn}.conf"
    hosts_entry delete "$fqdn"
    manage_database delete
  else
    exit 0
  fi
}

# Set site/global options
set_opts () {
  if [ -z $site ]
  then
    # Set global options
    setopts="$global_opts"
    passopts="$global_pass_opts"
    optfile="$conf_dir/damp.conf"
    passfile="$conf_dir/damp.pass"
    if [ ! -z $dbuser ]; then
      rootdbuser="$dbuser"
    fi
    if [ ! -z $dbpass ]; then
      rootdbpass="$dbpass"
    fi
  else
    # Set site specific options
    setopts="$site_opts"
    passopts="$site_pass_opts"
    alter_site
    optfile="$conf_dir/sites/${name}/conf"
    passfile="$conf_dir/sites/${name}/pass"
  fi
  for i in $setopts; do
    sed -i "s|${i}=.*|${i}=${!i}|" "$optfile"
    if [ $? -ne 0 ]; then
      error_exit "error writing to the configuration file"
    fi
    if [ $i == "httpdport" ]; then
      update_port
    fi
    if [ $i == "rootdbuser" ]; then
      configure_dbadmin
    fi
  done
  for i in $passopts; do
    sed -i "s|${i}=.*|${i}=${!i}|" "$passfile"
    if [ $? -ne 0 ]; then
      error_exit "error writing to the password file"
    fi
    if [ $i == "rootdbpass" ]; then
      configure_dbadmin
    fi
  done
  if [ ! -z $alter_error ]; then
    error_exit "errors occurred while altering site options"
  fi
}

get_opts () {
  if [ -z $site ]
  then
    echo "Global config file: $conf_dir/damp.conf"
    cat "$conf_dir/damp.conf"
    if [ ! -z $show_pass ]; then
      cat "$conf_dir/damp.pass"
    fi
  else
    load_site $site
    echo "$name config: $conf_dir/sites/${name}"
    cat "$conf_dir/sites/${name}/conf"
    if [ ! -z $show_pass ]; then
      cat "$conf_dir/sites/${name}/pass"
    fi
  fi
}

# Install and configure packages for the DAMP stack
setup_stack () {
  # Install system-specific packages
  detect_os
  case "$os" in
    "Red Hat"|CentOS)
      yum -y install httpd mysql mysql-server php-cli php-pear php-xml php-mysql php-mbstring php-pdo php-gd php-devel wget git
      yum -y groupinstall "Development Tools"
      if [ ! -z $mail ]; then
        yum -y install postfix
      fi
      ;;
    Ubuntu|Debian)
      apt-get -y install apache2 mysql-server mysql-client php5 php5-cli php5-mysql php5-xmlrpc php-pear php5-gd php5-dev wget git build-essential
      if [ ! -z $mail ]; then
        apt-get -y install postfix
      fi
      a2enmod rewrite
      ;;
  esac

  # Install Drush
  if [ ! -z $drush ]; then
    pear channel-discover pear.drush.org
    pear install drush/drush
    drush help > /dev/null 2>&1
  fi

  # Enable SELinux httpd contexts in home directories
  command -v setsebool > /dev/null 2>&1
  if [ $? -eq 0 ]; then
    setsebool -P httpd_enable_homedirs true
  fi

  # Install the php uploadprogress module
  pecl install uploadprogress
  grep "extension=uploadprogress.so" "$phpconf" > /dev/null 2>&1
  if [ $? -ne 0 ]; then
    echo "extension=uploadprogress.so" >> "$phpconf"
  fi

  # Prevent errors related to Apache server name
  grep "ServerName localhost" "$httpdconf" > /dev/null 2>&1
  if [ $? -ne 0 ]; then
    echo "ServerName localhost" >> "$httpdconf"
  fi

  # Install the script to system directories
  if [ ! -z $install ]; then
    cp -f "$0" /usr/bin
    if [ $? -ne 0 ]; then
      error_exit "could not copy script to /usr/bin"
    fi
    chmod 755 /usr/bin/damp
    old_conf_dir="$conf_dir"
    conf_dir="/etc/damp"
    conf_user="root"
    if [ -d "$old_conf_dir" ] && [ $old_conf_dir != $conf_dir ]
    then
      cp -R "$old_conf_dir" /etc
      if [ $? -ne 0 ]; then
        error_exit "error copying local configuration files to /etc/damp"
      fi
      chmod -R 644 /etc/damp
      chmod 640 /etc/damp/sites/*/pass > /dev/null 2>&1
      chmod 640 /etc/damp/damp.pass
      chmod 755 /etc/damp
      chmod 755 /etc/damp/sites
      rm -Rf "$old_conf_dir"
      echo "$progname: script installed successfully"
    else
      create_conf_dir
    fi
  fi

  damp_services restart
  as_user "touch \"${conf_dir}/setup-run\"" $conf_user
  chmod 644 "${conf_dir}/setup-run"
  echo "$progname: remember to set the root MySQL password using; $progname set --dbpass mypass"
}

# Configures database administration script
configure_dbadmin () {
  if [ -f "$dbadminconf" ]
  then
    grep "/* DAMP configuration - DO NOT REMOVE THIS LINE */" "$dbadminconf" > /dev/null 2>&1
    if [ $? -ne 0 ]
    then
      echo "/* DAMP configuration - DO NOT REMOVE THIS LINE */" >> "$dbadminconf"
      echo "\$cfg['Servers'][\$i]['auth_type'] = 'config';" >> "$dbadminconf"
      echo "\$cfg['Servers'][\$i]['user'] = '${rootdbuser}';" >> "$dbadminconf"
      echo "\$cfg['Servers'][\$i]['password'] = '${rootdbpass}';" >> "$dbadminconf"
      echo "\$cfg['Servers'][\$i]['nopassword'] = TRUE;" >> "$dbadminconf"
      echo "\$cfg['DefaultLang'] = 'en-utf-8';" >> "$dbadminconf"
      echo "\$cfg['ServerDefault'] = 2;" >> "$dbadminconf"
    else
      sed -i "s/['user'] = '.*'/['user'] = '${rootdbuser}'/g" "$dbadminconf"
      sed -i "s/['password'] = '.*'/['passowrd'] = '${rootdbpass}'/g" "$dbadminconf"
    fi
  fi
}

# Installs the database management script
setup_dbadmin () {
  if [ ! -f "${conf_dir}/setup-run" ]; then
    error_exit "you must run setup before you install database administration utilities"
  fi
  detect_os
  case "$os" in
    "Red Hat"|CentOS)
      yum -y install phpmyadmin
      ;;
    Ubuntu|Debian)
      apt-get -y install phpmyadmin
      ;;
  esac
  if [ $? -ne 0 ]; then
    error_exit "could not install database administration packages"
  fi
  configure_dbadmin
  if [ -f "$httpdconfdir/phpmyadmin.conf" ]; then
    grep "###  DAMP configuration - DO NOT REMOVE THIS LINE ###" "$httpdconfdir/phpmyadmin.conf" > /dev/null 2>&1
    if [ $? -ne 0 ]; then
      directory_text1="<Directory /usr/share/phpmyadmin>\nOrder Deny,Allow\nDeny from all\nAllow from 127.0.0.1"
      directory_text2="<Directory /usr/share/phpmyadmin/setup>\nOrder Deny,Allow\nDeny from all\nAllow from 127.0.0.1"
      sed -i "s|<Directory /usr/share/phpmyadmin>|${directory_text1}|g" "$httpdconfdir/phpmyadmin.conf"
      sed -i "s|<Directory /usr/share/phpmyadmin/setup>|${directory_text2}|g" "$httpdconfdir/phpmyadmin.conf"
      echo "###  DAMP script configuration complete - DO NOT REMOVE THIS LINE ###" >> "$httpdconfdir/phpmyadmin.conf"
    fi
  fi
}

# Uninstallation function for script and configuration files
function uninstall_script () {
  if [ -z $yes_to_all ]; then
    echo "You are about to remove DAMP from your system. This will delete all"
    echo "site/script data, but will not remove any installed packages."
    echo -n "Are you sure you want to uninstall ${progname} [y|n]: "
    read sure
  else
    sure="y"
  fi
  if [ "${sure}" == "y" ] || [ "${sure}" == "Y" ]
  then
    if [ ! -z $(list_sites) ]
    then
      while read line
      do
        site=$line
        remove_site
      done <<< "$(list_sites)"
    fi
    damp_services restart
    rm -Rf "$conf_dir"
    rm -f /usr/bin/damp > /dev/null 2>&1
  else
    exit 0
  fi
}

# Edit service configuration files in the terminal
edit_conf () {
  if [ -z $1 ]
  then
    error_exit "no component specified"
  else
    case "$1" in
      php)
        vi $phpconf
        ;;
      httpd|apache)
        vi $httpdconf
        ;;
      db|database|mysql)
        vi $dbconf
        ;;
      *)
        error_exit "unrecognized component"
        ;;
    esac
  fi
}

# Fix permission issues for the site file system
fix_perm () {
  load_site $site
  chmod 755 "${docroot}/sites/${fqdn}" >/dev/null 2>&1
  find "${docroot}/sites/${fqdn}/files" -type d -print0 | xargs -0 chmod o+rwx >/dev/null 2>&1
  find "${docroot}/sites/${fqdn}/files" -type f -print0 | xargs -0 chmod o+rw >/dev/null 2>&1
}


########################################
##       Script execution start       ##
########################################

# What configuration directory are we using?
if [ -z $SUDO_USER ]
then
  user_home="$HOME"
else
  user_home="$(getent passwd $SUDO_USER | cut -d: -f6)"
fi
if [ -z $conf_dir ]
then
  if [ -f "$user_home/.local/share/damp/damp.conf" ]
  then
    conf_dir="$user_home/.local/share/damp"
  elif [ -d "/etc/damp" ]
  then
    conf_dir="/etc/damp"
    conf_user="root"
  else
    conf_dir="$user_home/.local/share/damp"
  fi
fi

# Do we have all the commands we need?
if [ ! -f "${conf_dir}/setup-run" ]; then
  check_commands
  echo "${progname}: Setup has not been run. Try ${0} setup"
fi

# Check if we have any arguments at all
if [ -z $1 ]
then
  usage
  exit 1
fi

# Create configuration files if not present
create_conf_dir
if [ ! -f "$conf_dir/damp.conf" ]; then
  detect_os
  generate_global_conf
fi

# Parse global configuration files
parse_conf "$conf_dir/damp.conf"
if [ -r "$conf_dir/damp.pass" ]; then
  parse_conf "$conf_dir/damp.pass"
fi

# Execute getopt to parse arguments
ARGS=$(getopt -o hvn:d:miuaM:p:b:y -l help,version,name:,domain:,path:,docroot:,db:,database:,mail,install,uninstall,drush,dbadmin,make:,phpconf:,httpdconf:,httpdvhost:,httpdport:,dbconf:,dbport:,dbuser:,dbpass:,initpath:,language:,yes,passwords -n "$progname" -- "$@");

# Bad arguments
if [ $? -ne 0 ];
then
  exit 1
fi

# A little argument magic...
eval set -- "$ARGS";

# Process options
while true; do
  case "$1" in
    -h|--help)
      shift
      usage
      exit 0
      ;;
    -v|--version)
      shift
      show_version
      exit 0
      ;;
    -n|--name)
      shift;
      if [ -n "$1" ]; then
        name="$1"
        shift;
      fi
      ;;
    -d|--domain)
      shift;
      if [ -n "$1" ]; then
        domain="$1"
        shift;
      fi
      ;;
    -p|--path|--docroot)
      shift;
      if [ -n "$1" ]; then
        docroot="$1"
        shift;
      fi
      ;;
    -b|--db|--database)
      shift;
      if [ -n "$1" ]; then
        database="$1"
        shift;
      fi
      ;;
    -m|--mail)
      shift;
      mail="mail"
      ;;
    -i|--install)
      shift;
      install="install"
      ;;
    --uninstall)
      shift;
      uninstall="remove"
      ;;
    -u|--drush)
      shift;
      drush="drush"
      ;;
    -a|--dbadmin)
      shift;
      dbadmin="dbadmin"
      ;;
    -M|--make)
      shift;
      if [ -n "$1" ]; then
        drush_make="$1"
        shift;
      fi
      ;;
    -y|--yes)
      shift;
      yes_to_all=1
      ;;
    --passwords)
      shift;
      requires_root
      show_pass="show"
      ;;
    --phpconf)
      shift;
      if [ -n "$1" ]; then
        phpconf="$1"
        shift;
      fi
      ;;
    --httpdconf)
      shift;
      if [ -n "$1" ]; then
        httpdconf="$1"
        shift;
      fi
      ;;
    --httpdvhost)
      shift;
      if [ -n "$1" ]; then
        httpdvhost="$1"
        shift;
      fi
      ;;
    --httpdport)
      shift;
      if [ -n "$1" ]; then
        httpdport="$1"
        shift;
      fi
      ;;
    --dbconf)
      shift;
      if [ -n "$1" ]; then
        dbconf="$1"
        shift;
      fi
      ;;
    --dbport)
      shift;
      if [ -n "$1" ]; then
        dbport="$1"
        shift;
      fi
      ;;
    --dbuser)
      shift;
      if [ -n "$1" ]; then
        dbuser="$1"
        shift;
      fi
      ;;
    --dbpass)
      shift;
      if [ -n "$1" ]; then
        dbpass="$1"
        shift;
      fi
      ;;
    --initpath)
      shift;
      if [ -n "$1" ]; then
        initpath="$1"
        shift;
      fi
      ;;
    --language)
      shift;
      if [ -n "$1" ]; then
        lang="$1"
        shift;
      fi
      ;;
    --)
      shift
      break
      ;;
  esac
done

# Store command and site parameters in global variables
operation="$1"
site="$2" 

# Process arguments and perform the requested operation
case "$operation" in
  list|info|ls)
    site_info
    ;;
  new)
    requires_root
    new_site
    ;;
  open)
    if [ -z $dbadmin ]
    then
      requires_site
      open_site $site
    else
      open_url "http://localhost:${httpdport}/phpmyadmin"
    fi
    ;;
  remove|delete|rm|del)
    requires_root
    requires_site
    remove_site
    damp_services restart
    ;;
  set|update)
    requires_root
    set_opts
    ;;
  get)
    get_opts
    ;;
  start|stop|restart|status)
    requires_root
    damp_services $operation
    ;;
  setup)
    requires_root
    if [ ! -z $uninstall ]; then
      uninstall_script
    elif [ ! -z $dbadmin ]; then
      setup_dbadmin
    else
      setup_stack
    fi
    ;;
  conf|configure)
    requires_root
    edit_conf $site
    ;;
  fix|fixperms|fixperm)
    requires_root
    requires_site
    fix_perm
    ;;
  *)
    echo "${progname}: command not recognized - try $0 --help" 1>&2
    exit 1
    ;;
esac

exit 0
