#!/bin/bash

### Script configuration variables ###

progname="damp"
conf_dir="$HOME/.local/share/damp"


### Function definitions ###

# Define basic help text
usage () {
  echo "TODO: usage text"
}

# Error handling
function error_exit () {
  echo "${progname}: ${1:-"unknown error"}" 1>&2
  exit 1
}

generate_global_conf () {
  cat > "$conf_dir/damp.conf" <<EOF
phpconf=/etc/php.ini
httpdconf=/etc/httpd
httpdport=8080
dbconf=/etc/my.cnf
dbuser=root
dbpass=
dbport=3306
initpath=/etc/init.d
EOF
}

parse_conf () {
  while read propline ; do 
    # ignore comment lines
    echo "$propline" | grep "^#" >/dev/null 2>&1 && continue
    # if not empty, set the property using declare
    [ ! -z "$propline" ] && eval damp_$propline
  done < "$1"
  if [ $? -ne 0 ]; then
    error_exit "could not parse configuration file"
  fi
}

requires_site () {
  if [ -z $site ]
  then
    error_exit "the requested operation requires a site"
  fi
}

list_sites () {
  echo "list operation called"
}

site_info () {
  echo "site info operation called"
}

new_site () {
  echo "new site operation called"
}

open_site () {
  echo "open site operation called"
}

remove_site () {
  echo "remove site operation called"
}

update_sites () {
  echo "update sites operation called"
}

set_site () {
  echo "set site operation called"
}

start_services () {
  echo "start operation called"
}

stop_services () {
  echo "stop operation called"
}

restart_services () {
  echo "restart operation called"
}

status_services () {
  echo "status operation called"
}

setup_stack () {
  echo "setup operation called"
}

set_global () {
  echo "global operation called"
}

edit_conf () {
  echo "conf operation called"
}

### Script execution start ###

# Make sure we are running as root - disabled for development
#if [ $(id -u) -ne 0 ]
#then
#  error_exit "must be run as root"
#fi

# Create configuration files if not present
if [ ! -d "$conf_dir" ]; then
  mkdir -p "$conf_dir"
fi
if [ ! -d "$conf_dir/sites" ]; then
  mkdir -p "$conf_dir/sites"
fi
if [ $? -ne 0 ]; then
  error_exit "could not create configuration directories"
fi
if [ ! -f "$conf_dir/damp.conf" ]; then
  generate_global_conf
fi

# Parse global configuration file
parse_conf "$conf_dir/damp.conf"

# Check if we have any arguments at all
if [ -z $1 ]
then
  usage
  exit 1
fi

# Execute getopt to parse arguments
ARGS=$(getopt -o hn:d:p:b: -l help,name:,domain:,path:,db:,database:,phpconf:,httpdconf:,httpdport:,dbconf:,dbport:,dbuser:,dbpass:,initpath: -n "$progname" -- "$@");

# Bad arguments
if [ $? -ne 0 ];
then
  exit 1
fi

# A little argument magic...
eval set -- "$ARGS";

# Process options
while true; do
  case "$1" in
    -h|--help)
      shift
      usage
      exit 0
      ;;
    -n|--name)
      shift;
      if [ -n "$1" ]; then
        damp_name="$1"
        shift;
      fi
      ;;
    -d|--domain)
      shift;
      if [ -n "$1" ]; then
        damp_domain="$1"
        shift;
      fi
      ;;
    -p|--path)
      shift;
      if [ -n "$1" ]; then
        damp_path="$1"
        shift;
      fi
      ;;
    -b|--db|--database)
      shift;
      if [ -n "$1" ]; then
        damp_db="$1"
        shift;
      fi
      ;;
    --phpconf)
      shift;
      if [ -n "$1" ]; then
        damp_phpconf="$1"
        shift;
      fi
      ;;
    --httpdconf)
      shift;
      if [ -n "$1" ]; then
        damp_httpdconf="$1"
        shift;
      fi
      ;;
    --httpdport)
      shift;
      if [ -n "$1" ]; then
        damp_httpdport="$1"
        shift;
      fi
      ;;
    --dbconf)
      shift;
      if [ -n "$1" ]; then
        damp_dbconf="$1"
        shift;
      fi
      ;;
    --dbport)
      shift;
      if [ -n "$1" ]; then
        damp_dbport="$1"
        shift;
      fi
      ;;
    --dbuser)
      shift;
      if [ -n "$1" ]; then
        damp_dbuser="$1"
        shift;
      fi
      ;;
    --dbpass)
      shift;
      if [ -n "$1" ]; then
        damp_dbpass="$1"
        shift;
      fi
      ;;
    --initpath)
      shift;
      if [ -n "$1" ]; then
        damp_initpath="$1"
        shift;
      fi
      ;;
    --)
      shift
      break
      ;;
  esac
done

# Store operation and site parameters in global variables
operation="$1"
site="$2" 

# Process arguments and perform the requested operation
case "$operation" in
  list)
    list_sites
    exit 0
    ;;
  open)
    requires_site
    open_site
    exit 0
    ;;
  *)
    echo "${progname}: operation not recognized - try $0 --help" 1>&2
    exit 1
    ;;
esac

echo "Success!"
exit 0
