#!/bin/bash

### Script configuration variables ###

progname="damp"
conf_dir="$HOME/.local/share/damp"


### Function definitions ###

# Define basic help text
usage () {
  echo "TODO: usage text"
}

# Error handling
function error_exit () {
  echo "${progname}: ${1:-"unknown error"}" 1>&2
  exit 1
}

generate_global_conf () {
  cat > "$conf_dir/damp.conf" <<EOF
phpconf=/etc/php.ini
httpdconf=/etc/apache2/apache.conf
httpdvhost=/etc/apache2/sites-enabled
httpdport=8080
dbconf=/etc/my.cnf
dbuser=root
dbpass=
dbport=3306
initpath=/etc/init.d
EOF
}

parse_conf () {
  while read propline ; do 
    # ignore comment lines
    echo "$propline" | grep "^#" >/dev/null 2>&1 && continue
    # if not empty, set the property using declare
    [ ! -z "$propline" ] && eval $propline
  done < "$1"
  if [ $? -ne 0 ]; then
    error_exit "could not parse configuration file"
  fi
}

detect_os () {
  distributions="Red CentOS Ubuntu Debian"
  os=""
  for i in $distributions; do
    cat /etc/*release | grep $i > /dev/null 2>&1
    if [ $? == 0 ]; then
      os=$i
    fi
  done
  if [ -z $os ]; then
    error_exit "unsupported operating system - perform operation manually"
  fi
  if [ $os == "Red" ]; then
    os="Red Hat"
  fi
}

install_packages () {
  case "$1" in
    "Red Hat"|CentOS)
      yum install httpd mysql mysql-server php-cli php-pear php-xml php-mysql php-mbstring php-pdo php-gd
      if [ ! -z $mail ]; then
        yum install postfix
      fi
      ;;
    Ubuntu|Debian)
      apt-get install apache2 mysql-server mysql-client php5 php5-cli php5-mysql php5-xmlrpc php-pear php5-gd
      if [ ! -z $mail ]; then
        apt-get install postfix
      fi
      ;;
  esac
}

requires_site () {
  if [ -z $site ]
  then
    error_exit "the requested operation requires a site"
  fi
}

load_site () {
  if [ -f "$conf_dir/sites/${1}.conf" ]
  then
    parse_conf "$conf_dir/sites/${1}.conf"
  else
    error_exit "site does not exist"
  fi
}

display_site () {
  if [ ! -z $domain ]
  then
    fqdn="${name}.${domain}"
  else
    fqdn="$name"
  fi
  echo "Site information:"
  echo "  Name:          $name"
  echo "  Domain:        $fqdn"
  echo "  Document root: $docroot"
  echo "  Database:      $db"
  echo "  DAMP config:   $conf_dir/sites/${name}.conf"
  echo "  Apache config: $httpdvhost/${name}.conf"
  echo ""
  echo "  Link:          http://${fqdn}"
}

site_info () {
  if [ -z $site ]
  then
    # List all sites
    ls -1 "$conf_dir/sites" | sed "s/.conf//"
  else
    # Display information about a site
    load_site $site
    display_site
  fi
}

new_site () {
  echo "new site operation called"
}

open_site () {
  echo "open site operation called"
}

remove_site () {
  echo "remove site operation called"
}

update_sites () {
  echo "update sites operation called"
}

set_opts () {
  if [ -z $site ]
  then
    # Set global options
    setopts="phpconf httpdconf httpdvhost httpdport dbconf dbuser dbpass dbport initpath"
    optfile="$conf_dir/damp.conf"
  else
    # Set site specific options
    load_site $site
    setopts="name domain docroot db dbuser dbpass"
    optfile="$conf_dir/sites/${site}.conf"
  fi
  for i in $setopts; do
    sed -i "s|${i}=.*|${i}=${!i}|" "$optfile"
    if [ $? -ne 0 ]; then
      error_exit "error writing to the configuration file"
    fi
  done
}

damp_services () {
  detect_os
  service_error=0
  case "$os" in
    "Red Hat"|CentOS)
      service mysqld $1; [ $? -ne 0 ] && service_error=1
      service httpd $1; [ $? -ne 0 ] && service_error=1
      ;;
    Ubuntu)
      service mysql $1; [ $? -ne 0 ] && service_error=1
      service apache2 $1; [ $? -ne 0 ] && service_error=1
      ;;
    Debian)
      $initpath/mysql $1; [ $? -ne 0 ] && service_error=1
      $initpath/apache2 $1; [ $? -ne 0 ] && service_error=1
      ;;
  esac
  if [ $service_error -ne 0 ]; then
    error_exit "errors occurred while performing the requested operations"
  fi
}

setup_stack () {
  detect_os
  install_packages $os
}

set_global () {
  for i in $global_options; do
    sed -i "s|${i}=.*|${i}=${!i}|" "$conf_dir/damp.conf"
    if [ $? -ne 0 ]; then
      error_exit "error writing to global configuration file."
    fi
  done
}

edit_conf () {
  if [ -z $1 ]
  then
    error_exit "no component specified"
  else
    case "$1" in
      php)
        vi $phpconf
        break
        ;;
      httpd)
        vi $httpdconf
        break
        ;;
      db)
        vi $dbconf
        break
        ;;
      *)
        error_exit "unrecognized component"
        ;;
    esac
  fi
}

### Script execution start ###

# Make sure we are running as root - disabled for development
#if [ $(id -u) -ne 0 ]
#then
#  error_exit "must be run as root"
#fi

# Create configuration files if not present
if [ ! -d "$conf_dir" ]; then
  mkdir -p "$conf_dir"
fi
if [ ! -d "$conf_dir/sites" ]; then
  mkdir -p "$conf_dir/sites"
fi
if [ $? -ne 0 ]; then
  error_exit "could not create configuration directories"
fi
if [ ! -f "$conf_dir/damp.conf" ]; then
  generate_global_conf
fi

# Parse global configuration file
parse_conf "$conf_dir/damp.conf"

# Check if we have any arguments at all
if [ -z $1 ]
then
  usage
  exit 1
fi

# Execute getopt to parse arguments
ARGS=$(getopt -o hn:d:mp:b: -l help,name:,domain:,path:,docroot:,db:,database:,mail,phpconf:,httpdconf:,httpdvhost:,httpdport:,dbconf:,dbport:,dbuser:,dbpass:,initpath: -n "$progname" -- "$@");

# Bad arguments
if [ $? -ne 0 ];
then
  exit 1
fi

# A little argument magic...
eval set -- "$ARGS";

# Process options
while true; do
  case "$1" in
    -h|--help)
      shift
      usage
      exit 0
      ;;
    -n|--name)
      shift;
      if [ -n "$1" ]; then
        name="$1"
        shift;
      fi
      ;;
    -d|--domain)
      shift;
      if [ -n "$1" ]; then
        domain="$1"
        shift;
      fi
      ;;
    -p|--path|--docroot)
      shift;
      if [ -n "$1" ]; then
        docroot="$1"
        shift;
      fi
      ;;
    -b|--db|--database)
      shift;
      if [ -n "$1" ]; then
        db="$1"
        shift;
      fi
      ;;
    -m|--mail)
      shift;
      mail="install"
      ;;
    --phpconf)
      shift;
      if [ -n "$1" ]; then
        phpconf="$1"
        shift;
      fi
      ;;
    --httpdconf)
      shift;
      if [ -n "$1" ]; then
        httpdconf="$1"
        shift;
      fi
      ;;
    --httpdvhost)
      shift;
      if [ -n "$1" ]; then
        httpdvhost="$1"
        shift;
      fi
      ;;
    --httpdport)
      shift;
      if [ -n "$1" ]; then
        httpdport="$1"
        shift;
      fi
      ;;
    --dbconf)
      shift;
      if [ -n "$1" ]; then
        dbconf="$1"
        shift;
      fi
      ;;
    --dbport)
      shift;
      if [ -n "$1" ]; then
        dbport="$1"
        shift;
      fi
      ;;
    --dbuser)
      shift;
      if [ -n "$1" ]; then
        dbuser="$1"
        shift;
      fi
      ;;
    --dbpass)
      shift;
      if [ -n "$1" ]; then
        dbpass="$1"
        shift;
      fi
      ;;
    --initpath)
      shift;
      if [ -n "$1" ]; then
        initpath="$1"
        shift;
      fi
      ;;
    --)
      shift
      break
      ;;
  esac
done

# Store operation and site parameters in global variables
operation="$1"
site="$2" 

# Process arguments and perform the requested operation
case "$operation" in
  list|info)
    site_info
    exit 0
    ;;
  open)
    requires_site
    open_site
    exit 0
    ;;
  set)
    set_opts
    exit 0
    ;;
  start|stop|restart|status)
    damp_services $operation
    exit 0
    ;;
  setup)
    setup_stack
    exit 0
    ;;
  conf)
    edit_conf $2
    exit 0
    ;;
  *)
    echo "${progname}: operation not recognized - try $0 --help" 1>&2
    exit 1
    ;;
esac

echo "Success!"
exit 0
