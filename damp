#!/bin/bash

### Script configuration variables ###

progname="damp"
conf_dir="$HOME/.local/share/damp"
global_opts="phpconf httpdconf httpdvhost httpdport dbconf rootdbuser rootdbpass dbport initpath lang"
site_opts="name domain docroot database dbuser dbpass"


### Function definitions ###

# Define basic help text
usage () {
  echo "TODO: usage text"
}

# Error handling
function error_exit () {
  echo "${progname}: ${1:-"unknown error"}" 1>&2
  exit 1
}

as_user () {
  su -c "$1" $(who am i | awk '{print $1}')
}

generate_global_conf () {
  case "$os" in
    "Red Hat"|CentOS)
      as_user "cat > \"$conf_dir/damp.conf\" <<EOF
phpconf=/etc/php.ini
httpdconf=/etc/httpd/conf/httpd.conf
httpdvhost=/etc/httpd/conf.d
httpdport=8080
dbconf=/etc/my.cnf
rootdbuser=root
rootdbpass=
dbport=3306
initpath=/etc/init.d
lang=en
EOF"
      ;;
    *|Ubuntu|Debian)
      as_user "cat > \"$conf_dir/damp.conf\" <<EOF
phpconf=/etc/php5/apache2/php.ini
httpdconf=/etc/apache2/apache2.conf
httpdvhost=/etc/apache2/sites-enabled
httpdport=8080
dbconf=/etc/mysql/my.cnf
rootdbuser=root
rootdbpass=
dbport=3306
initpath=/etc/init.d
lang=en
EOF"
      ;;
  esac
}

parse_conf () {
  while read propline ; do 
    # ignore comment lines
    echo "$propline" | grep "^#" >/dev/null 2>&1 && continue
    # if not empty, set the property using declare
    [ ! -z "$propline" ] && eval $propline
  done < "$1"
  if [ $? -ne 0 ]; then
    error_exit "could not parse configuration file"
  fi
}

detect_os () {
  distributions="Red CentOS Ubuntu Debian"
  os=""
  for i in $distributions; do
    cat /etc/*release | grep $i > /dev/null 2>&1
    if [ $? == 0 ]; then
      os=$i
    fi
  done
  if [ -z $os ]; then
    error_exit "unsupported operating system - perform operation manually"
  fi
  if [ $os == "Red" ]; then
    os="Red Hat"
  fi
}

requires_site () {
  if [ -z $site ]
  then
    error_exit "the requested operation requires a site"
  fi
}

site_exists () {
  [ -f "$conf_dir/sites/${1}.conf" ]
}

build_fqdn () {
  if [ ! -z $domain ]
    then
      fqdn="${name}.${domain}"
    else
      fqdn="$name"
  fi
}

load_site () {
  site_exists "$1"
  if [ $? == 0 ]
  then
    parse_conf "$conf_dir/sites/${1}.conf"
    build_fqdn
  else
    error_exit "site does not exist"
  fi
}

display_site () {
  echo "Site information:"
  echo "  Name:          $name"
  echo "  Domain:        $fqdn"
  echo "  Document root: $docroot"
  echo "  Database:      $database"
  echo "  DAMP config:   $conf_dir/sites/${name}.conf"
  echo "  Apache config: $httpdvhost/${name}.conf"
  echo ""
  echo "  Link:          http://${fqdn}:${httpdport}"
}

create_drupal_settings () {
  as_user "cp \"$docroot/sites/default/default.settings.php\" \"$docroot/sites/$fqdn/settings.php\""
  if [ $? -ne 0 ]; then
    error_exit "could not write drupal site settings file."
  fi
  grep "db_url" "$docroot/sites/$fqdn/settings.php" > /dev/null 2>&1
  if [ $? -ne 0 ]
  then
    echo "
\$databases['default']['default'] = array(
  'driver' => 'mysql',
  'database' => '$database',
  'username' => '$dbuser',
  'password' => '$dbpass',
  'host' => 'localhost',
  'collation' => 'utf8_general_ci',
);" >> "$docroot/sites/$fqdn/settings.php"
  else
    echo "
\$db_url = 'mysql://${dbuser}:${dbpass}@localhost/${database}';" >> "$docroot/sites/$fqdn/settings.php"
  fi
}

create_vhost () {
  if [ -f "$httpdvhost/${fqdn}.conf" ]; then
    error_exit "there is already and apache vhost with that fqdn"
  fi
  cat > "$httpdvhost/${fqdn}.conf" <<EOF
NameVirtualHost *:${httpdport}
Listen ${httpdport}

<VirtualHost *:${httpdport}>
  ServerAdmin ${USER}@localhost
  DocumentRoot ${docroot}
  ServerName ${fqdn}
  RewriteEngine On
  RewriteOptions inherit
</VirtualHost>

<Directory ${docroot}>
  Options +FollowSymLinks Indexes
  AllowOverride All
  order allow,deny
  allow from all
</Directory>
EOF
  if [ $? -ne 0 ]; then
    error_exit "could not create apache vhost file"
  fi
}

hosts_entry () {
  echo "127.0.0.1 $fqdn" >> /etc/hosts
  if [ $? -ne 0 ]; then
    error_exit "could not create hosts file entry"
  fi
}

manage_database () {
  case "$1" in
    create)
      mysql -u $rootdbuser --password=$rootdbpass --execute="CREATE DATABASE ${database};"
      mysql -u $rootdbuser --password=$rootdbpass --execute="GRANT ALL PRIVILEGES ON ${database}.* TO ${dbuser}@localhost IDENTIFIED BY '${dbpass}';"
      mysql -u $rootdbuser --password=$rootdbpass --execute="flush privileges;"
      ;;
    delete)
      mysql -u $rootdbuser --password=$rootdbpass --execute="DROP USER ${dbuser}@localhost;"
      mysql -u $rootdbuser --password=$rootdbpass --execute="DROP DATABASE ${database};"
      mysql -u $rootdbuser --password=$rootdbpass --execute="flush privileges;"
      ;;
  esac
  if [ $? -ne 0 ]; then
    error_exit "error performing database operation"
  fi
}

site_info () {
  if [ -z $site ]
  then
    # List all sites
    site_count=$(ls -1 "$conf_dir/sites" | wc -l)
    echo "Sites installed: $site_count"
    ls -1 "$conf_dir/sites" | sed "s/.conf//"
  else
    # Display information about a site
    load_site $site
    display_site
  fi
}

open_site () {
  load_site $1
  url="http://${fqdn}:${httpdport}${2}"
  as_user "xdg-open $url > /dev/null 2>&1"
  if [ $? -ne 0 ]; then
    error_exit "could not open browser. URL is $url"
  fi
}

damp_services () {
  detect_os
  service_error=0
  case "$os" in
    "Red Hat"|CentOS)
      service mysqld $1; [ $? -ne 0 ] && service_error=1
      service httpd $1; [ $? -ne 0 ] && service_error=1
      ;;
    Ubuntu)
      service mysql $1; [ $? -ne 0 ] && service_error=1
      service apache2 $1; [ $? -ne 0 ] && service_error=1
      ;;
    Debian)
      $initpath/mysql $1; [ $? -ne 0 ] && service_error=1
      $initpath/apache2 $1; [ $? -ne 0 ] && service_error=1
      ;;
  esac
  if [ $service_error -ne 0 ]; then
    error_exit "errors occurred while performing the requested operations"
  fi
}

new_site () {
  if [ -z $dbpass ]; then
    dbpass=$(< /dev/urandom tr -dc A-Za-z0-9 | head -c8)
  fi
  for i in $site_opts; do
    if [ -z ${!i} ]
    then
      echo -n "Enter site ${i}: "
      read $i
      if [ -z ${!i} ] && [ $i != "domain" ]; then
        error_exit "$i is a required option"
      fi
    fi
    if [ $i == "name" ] && [ -z $dbuser ]; then
      dbuser="$name"
    fi
  done
  site_exists $name
  if [ $? -ne 0 ]
  then
    build_fqdn
    if [ ! -f "$docroot/sites/default/default.settings.php" ]; then
      error_exit "could not find default.settings.php"
    fi
    if [ -d "$docroot/sites/$fqdn" ]; then
      error_exit "drupal site already exists with that fqdn"
    fi
    manage_database create
    create_vhost
    as_user "mkdir -p \"$docroot/sites/$fqdn\""
    create_drupal_settings
    chmod -R 777 "$docroot/sites/$fqdn"
    as_user "touch \"$conf_dir/sites/${name}.conf\""
    for i in $site_opts; do
      echo "${i}=${!i}" >> "$conf_dir/sites/${name}.conf"
      if [ $? -ne 0 ]; then
        error_exit "error writing to site configuration file"
      fi
    done
    hosts_entry
    damp_services restart
    open_site $name "/install.php?locale=${lang}"
  else
    error_exit "site with that name already exists"
  fi
}

remove_site () {
  load_site $site
  if [ -z $yes_to_all ]; then
    echo -n "Are you sure you want to remove site '${name}' [y|n]: "
    read sure
  else
    sure="y"
  fi
  if [ "${sure}" == "y" ] ||
     [ "${sure}" == "Y" ]
  then
    rm -f "$conf_dir/sites/${site}.conf"
    rm -Rf "$docroot/sites/$fqdn"
    rm -f "$httpdvhost/${fqdn}.conf"
    hosts_line="/127.0.0.1 $fqdn/d"
    sed -i "$hosts_line" /etc/hosts
    manage_database delete
    damp_services restart
  else
    exit 0
  fi
}

update_sites () {
  echo "update sites operation called"
}

set_opts () {
  if [ -z $site ]
  then
    # Set global options
    setopts="$global_opts"
    optfile="$conf_dir/damp.conf"
    if [ ! -z $dbuser ]; then
      rootdbuser="$dbuser"
    fi
    if [ ! -z $dbpass ]; then
      rootdbpass="$dbpass"
    fi
  else
    # Set site specific options
    load_site $site
    setopts="$site_opts"
    optfile="$conf_dir/sites/${site}.conf"
  fi
  for i in $setopts; do
    sed -i "s|${i}=.*|${i}=${!i}|" "$optfile"
    if [ $? -ne 0 ]; then
      error_exit "error writing to the configuration file"
    fi
  done
}

setup_stack () {
  detect_os
  case "$os" in
    "Red Hat"|CentOS)
      yum install httpd mysql mysql-server php-cli php-pear php-xml php-mysql php-mbstring php-pdo php-gd
      if [ ! -z $mail ]; then
        yum install postfix
      fi
      ;;
    Ubuntu|Debian)
      apt-get install apache2 mysql-server mysql-client php5 php5-cli php5-mysql php5-xmlrpc php-pear php5-gd
      a2enmod rewrite
      if [ ! -z $mail ]; then
        apt-get install postfix
      fi
      ;;
  esac
  echo "ServerName localhost" >> "$httpdconf"
  damp_services restart
}

edit_conf () {
  if [ -z $1 ]
  then
    error_exit "no component specified"
  else
    case "$1" in
      php)
        vi $phpconf
        break
        ;;
      httpd|apache)
        vi $httpdconf
        break
        ;;
      db|database|mysql)
        vi $dbconf
        break
        ;;
      *)
        error_exit "unrecognized component"
        ;;
    esac
  fi
}

### Script execution start ###

# Make sure we are running as root
if [ $(id -u) -ne 0 ]
then
  error_exit "must be run as root"
fi

# Create configuration files if not present
if [ ! -d "$conf_dir" ]; then
  as_user "mkdir -p \"$conf_dir\""
fi
if [ ! -d "$conf_dir/sites" ]; then
  as_user "mkdir -p \"$conf_dir/sites\""
fi
if [ $? -ne 0 ]; then
  error_exit "could not create configuration directories"
fi
if [ ! -f "$conf_dir/damp.conf" ]; then
  detect_os
  generate_global_conf
fi

# Parse global configuration file
parse_conf "$conf_dir/damp.conf"

# Check if we have any arguments at all
if [ -z $1 ]
then
  usage
  exit 1
fi

# Execute getopt to parse arguments
ARGS=$(getopt -o hn:d:mp:b:y -l help,name:,domain:,path:,docroot:,db:,database:,mail,phpconf:,httpdconf:,httpdvhost:,httpdport:,dbconf:,dbport:,dbuser:,dbpass:,initpath: -n "$progname" -- "$@");

# Bad arguments
if [ $? -ne 0 ];
then
  exit 1
fi

# A little argument magic...
eval set -- "$ARGS";

# Process options
while true; do
  case "$1" in
    -h|--help)
      shift
      usage
      exit 0
      ;;
    -n|--name)
      shift;
      if [ -n "$1" ]; then
        name="$1"
        shift;
      fi
      ;;
    -d|--domain)
      shift;
      if [ -n "$1" ]; then
        domain="$1"
        shift;
      fi
      ;;
    -p|--path|--docroot)
      shift;
      if [ -n "$1" ]; then
        docroot="$1"
        shift;
      fi
      ;;
    -b|--db|--database)
      shift;
      if [ -n "$1" ]; then
        database="$1"
        shift;
      fi
      ;;
    -m|--mail)
      shift;
      mail="install"
      ;;
    -y)
      shift;
      yes_to_all=1
      ;;
    --phpconf)
      shift;
      if [ -n "$1" ]; then
        phpconf="$1"
        shift;
      fi
      ;;
    --httpdconf)
      shift;
      if [ -n "$1" ]; then
        httpdconf="$1"
        shift;
      fi
      ;;
    --httpdvhost)
      shift;
      if [ -n "$1" ]; then
        httpdvhost="$1"
        shift;
      fi
      ;;
    --httpdport)
      shift;
      if [ -n "$1" ]; then
        httpdport="$1"
        shift;
      fi
      ;;
    --dbconf)
      shift;
      if [ -n "$1" ]; then
        dbconf="$1"
        shift;
      fi
      ;;
    --dbport)
      shift;
      if [ -n "$1" ]; then
        dbport="$1"
        shift;
      fi
      ;;
    --dbuser)
      shift;
      if [ -n "$1" ]; then
        dbuser="$1"
        shift;
      fi
      ;;
    --dbpass)
      shift;
      if [ -n "$1" ]; then
        dbpass="$1"
        shift;
      fi
      ;;
    --initpath)
      shift;
      if [ -n "$1" ]; then
        initpath="$1"
        shift;
      fi
      ;;
    --)
      shift
      break
      ;;
  esac
done

# Store operation and site parameters in global variables
operation="$1"
site="$2" 

# Process arguments and perform the requested operation
case "$operation" in
  list|info)
    site_info
    exit 0
    ;;
  new)
    new_site
    exit 0
    ;;
  open)
    requires_site
    open_site $site
    exit 0
    ;;
  remove|delete|rm|del)
    requires_site
    remove_site
    exit 0
    ;;
  set)
    set_opts
    exit 0
    ;;
  start|stop|restart|status)
    damp_services $operation
    exit 0
    ;;
  setup|install)
    setup_stack
    exit 0
    ;;
  conf)
    edit_conf $site
    exit 0
    ;;
  *)
    echo "${progname}: operation not recognized - try $0 --help" 1>&2
    exit 1
    ;;
esac

exit 0
